{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","RenderOption","option","optionText","correctAnswer","checkAnswer","classText","isShowCurrectAnswer","className","onClick","RenderQuestion","question","onSkipClick","option1","correct_answer","option2","option3","option4","NoQuestion","RenderSuccessPopup","src","alt","width","RenderWrongPopup","Home","useState","bgClass","setBgClass","isSuccess","setIsSuccess","isWrong","setIsWrong","setQuestion","setIsShowCurrectAnswer","total","setTotal","solved","setSolved","correct","setCorrect","wrong","setWrong","bgs","useEffect","bg","Math","floor","random","length","collection","where","limit","onSnapshot","doc","empty","console","log","id","docs","data","size","selectedAnswer","setTimeout","update","user_answer","user_answer_status","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQAeAA,gBAXuB,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAKT,cAELU,EAAe,SAAC,GAA6E,IAA3EC,EAA0E,EAA1EA,OAAQC,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,YACnDC,EAD0F,EAA1BC,qBAC5BH,IAAkBF,EAAU,yBAA2B,cAEjG,OACE,yBAAKM,UAAU,mBACb,4BAAQA,UAAWF,EAAWG,QAAS,kBAAMJ,EAAYH,KACvD,yBAAKM,UAAU,aACb,2BAAG,2BAAKN,EAAL,MAAH,IAAyBC,OAO7BO,EAAiB,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,SAAUN,EAAoD,EAApDA,YAAaE,EAAuC,EAAvCA,oBAAqBK,EAAkB,EAAlBA,YACpE,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,uBAAsB,kCAAnC,IAAgDG,EAASA,WAE3D,kBAAC,EAAD,CAAcT,OAAO,IAAIC,WAAYQ,EAASE,QAAST,cAAeO,EAASG,eAAgBT,YAAaA,EAAaE,oBAAqBA,IAC9I,kBAAC,EAAD,CAAcL,OAAO,IAAIC,WAAYQ,EAASI,QAASX,cAAeO,EAASG,eAAgBT,YAAaA,EAAaE,oBAAqBA,IAC9I,kBAAC,EAAD,CAAcL,OAAO,IAAIC,WAAYQ,EAASK,QAASZ,cAAeO,EAASG,eAAgBT,YAAaA,EAAaE,oBAAqBA,IAC9I,kBAAC,EAAD,CAAcL,OAAO,IAAIC,WAAYQ,EAASM,QAASb,cAAeO,EAASG,eAAgBT,YAAaA,EAAaE,oBAAqBA,IAC9I,yBAAKC,UAAU,2BACb,4BAAQA,UAAU,iBAAiBC,QAASG,GAA5C,QAA+D,SAMjEM,EAAa,kBACjB,wBAAIV,UAAU,+BAAd,wBAGIW,EAAqB,kBACzB,yBAAKX,UAAU,0DACb,yBAAKA,UAAU,eACb,yBAAKY,IAAI,gDAAgDC,IAAI,UAAUC,MAAM,QAC7E,wBAAId,UAAU,qBAAd,sBAKAe,EAAmB,kBACvB,yBAAKf,UAAU,0DACb,yBAAKA,UAAU,eACb,yBAAKY,IAAI,8CAA8CC,IAAI,QAAQC,MAAM,QACzE,wBAAId,UAAU,mBAAd,iBACA,2DAKAgB,EAAO,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACVC,EADU,KACDC,EADC,OAEiBF,oBAAS,GAF1B,mBAEVG,EAFU,KAECC,EAFD,OAGaJ,oBAAS,GAHtB,mBAGVK,EAHU,KAGDC,EAHC,OAIeN,mBAAS,MAJxB,mBAIVd,EAJU,KAIAqB,EAJA,OAKqCP,oBAAS,GAL9C,mBAKVlB,EALU,KAKW0B,EALX,OAMSR,mBAAS,GANlB,mBAMVS,EANU,KAMHC,EANG,OAOWV,mBAAS,GAPpB,mBAOVW,EAPU,KAOFC,EAPE,OAQaZ,mBAAS,GARtB,mBAQVa,EARU,KAQDC,EARC,OASSd,mBAAS,GATlB,mBASVe,EATU,KASHC,EATG,KAWXC,EAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,QA6FrF,OAzCAC,qBAAU,WACR,IAAIC,EAlDGF,EAAIG,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,SAmD1CrB,EAAWiB,GAEX5C,EAAGiD,WAAW,aACXC,MAAM,qBAAsB,KAAM,GAClCC,MAAM,GACNC,YAAW,SAACC,GACNA,EAAIC,OAGPtB,EAAY,MACZuB,QAAQC,IAAI,sBAHZxB,EAAY,aAAEyB,GAAIJ,EAAIK,KAAK,GAAGD,IAAOJ,EAAIK,KAAK,GAAGC,YAOvD3D,EAAGiD,WAAW,aACXG,YAAW,SAACC,GACXlB,EAASkB,EAAIO,SAGjB5D,EAAGiD,WAAW,aACXC,MAAM,qBAAsB,IAAK,GACjCE,YAAW,SAACC,GACXhB,EAAUgB,EAAIO,SAGlB5D,EAAGiD,WAAW,aACXC,MAAM,qBAAsB,KAAM,GAClCE,YAAW,SAACC,GACXZ,EAASY,EAAIO,SAGjB5D,EAAGiD,WAAW,aACXC,MAAM,qBAAsB,KAAM,GAClCE,YAAW,SAACC,GACXd,EAAWc,EAAIO,WAGlB,IAGD,yBAAKpD,UAAS,aAAQkB,IACpB,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,0BAAd,cAEF,yBAAKA,UAAU,4BACb,uBAAGA,UAAU,cAAa,sCAA1B,IAA2C0B,IAE7C,yBAAK1B,UAAU,4BACb,uBAAGA,UAAU,cAAa,uCAA1B,IAA4C4B,IAE9C,yBAAK5B,UAAU,4BACb,uBAAGA,UAAU,cAAa,wCAA1B,IAA6C8B,IAE/C,yBAAK9B,UAAU,4BACb,uBAAGA,UAAU,cAAa,sCAA1B,IAA2CgC,KAG7C7B,EAAW,kBAAC,EAAD,CAAgBA,SAAUA,EAAUN,YA7FnC,SAACwD,GACnB5B,GAAuB,GAEvB6B,YAAW,WACT7B,GAAuB,GACnB4B,IAAmBlD,EAASG,gBAlBlCe,GAAa,GACbiC,YAAW,WACTjC,GAAa,KACZ,KAiBC7B,EAAGiD,WAAW,aAAaI,IAAI1C,EAAS8C,IAAIM,OAAO,CACjDC,YAAaH,EACbI,mBAAoB,MAf1BlC,GAAW,GACX+B,YAAW,WACT/B,GAAW,KACV,KAgBC/B,EAAGiD,WAAW,aAAaI,IAAI1C,EAAS8C,IAAIM,OAAO,CACjDC,YAAaH,EACbI,mBAAoB,OAGvB,MA2E4E1D,oBAAqBA,EAAqBK,YAxEvG,WAClBqB,GAAuB,GAEvB6B,YAAW,WACT7B,GAAuB,GACvBjC,EAAGiD,WAAW,aAAaI,IAAI1C,EAAS8C,IAAIM,OAAO,CACjDE,mBAAoB,MAErB,QAgEqJ,kBAAC,EAAD,MAClJrC,GAAa,kBAAC,EAAD,MACbE,GAAW,kBAAC,EAAD,SAYNoC,EANH,WACV,OACE,kBAAC,EAAD,OCnMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.5f73c124.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCRjWJ1GGYRfiJ8H7vMtBtIfU8LgJ_wQUc\",\n  authDomain: \"online-exam-3dbf6.firebaseapp.com\",\n  databaseURL: \"https://online-exam-3dbf6.firebaseio.com\",\n  projectId: \"online-exam-3dbf6\",\n  storageBucket: \"online-exam-3dbf6.appspot.com\",\n  messagingSenderId: \"887329167134\",\n  appId: \"1:887329167134:web:01f9e8e2aa0f64b1dfdb0f\",\n  measurementId: \"G-S1ZJM57K3Q\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\n\nconst RenderOption = ({ option, optionText, correctAnswer, checkAnswer, isShowCurrectAnswer }) => {\n  const classText = (isShowCurrectAnswer && correctAnswer === option) ? 'card option bg-success' : 'card option';\n  \n  return (\n    <div className=\"col-12 col-lg-6\">\n      <button className={classText} onClick={() => checkAnswer(option)}>\n        <div className=\"card-body\">\n          <p><b>{ option }. </b> { optionText }</p>\n        </div>\n      </button>\n    </div>\n  );\n};\n\nconst RenderQuestion = ({ question, checkAnswer, isShowCurrectAnswer, onSkipClick }) => {  \n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mt-4 mb-3\">\n        <p className=\"question text-white\"><b>Q. </b> { question.question }</p>\n      </div>\n      <RenderOption option='A' optionText={question.option1} correctAnswer={question.correct_answer} checkAnswer={checkAnswer} isShowCurrectAnswer={isShowCurrectAnswer} />\n      <RenderOption option='B' optionText={question.option2} correctAnswer={question.correct_answer} checkAnswer={checkAnswer} isShowCurrectAnswer={isShowCurrectAnswer} />\n      <RenderOption option='C' optionText={question.option3} correctAnswer={question.correct_answer} checkAnswer={checkAnswer} isShowCurrectAnswer={isShowCurrectAnswer} />\n      <RenderOption option='D' optionText={question.option4} correctAnswer={question.correct_answer} checkAnswer={checkAnswer} isShowCurrectAnswer={isShowCurrectAnswer} />\n      <div className=\"col-12 text-center mt-4\">\n        <button className=\"btn btn-danger\" onClick={onSkipClick}>Skip {'>>'}</button>\n      </div>\n    </div>\n  );\n};\n\nconst NoQuestion = () => (\n  <h4 className=\"text-white text-center my-5\">No question exists!</h4>\n);\n\nconst RenderSuccessPopup = () => (\n  <div className=\"popup d-flex justify-content-center align-items-center\">\n    <div className=\"text-center\">\n      <img src=\"/assets/images/face_throwing_a_kiss_256_1.gif\" alt=\"success\" width=\"110\" />\n      <h4 className=\"text-success my-3\">Correct Answer!</h4>\n    </div>\n  </div>\n);\n\nconst RenderWrongPopup = () => (\n  <div className=\"popup d-flex justify-content-center align-items-center\">\n    <div className=\"text-center\">\n      <img src=\"/assets/images/loudly_crying_face_256_1.gif\" alt=\"wrong\" width=\"110\" />\n      <h3 className=\"text-wrong my-3\">Wrong Answer!</h3>\n      <p>Sare paise barbad ho gye.</p>\n    </div>\n  </div>\n);\n\nconst Home = () => {\n  const [bgClass, setBgClass] = useState('');\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isWrong, setIsWrong] = useState(false);\n  const [question, setQuestion] = useState(null);\n  const [isShowCurrectAnswer, setIsShowCurrectAnswer] = useState(false);\n  const [total, setTotal] = useState(0);\n  const [solved, setSolved] = useState(0);\n  const [correct, setCorrect] = useState(0);\n  const [wrong, setWrong] = useState(0);\n\n  const bgs = ['bg1', 'bg2', 'bg3', 'bg4', 'bg6', 'bg7', 'bg8', 'bg9', 'bg10', 'bg11', 'bg12'];\n\n  const randomBg = () => {\n    return bgs[Math.floor(Math.random() * bgs.length)];\n  };\n\n  const successPopup = () => {\n    setIsSuccess(true);\n    setTimeout(() => {\n      setIsSuccess(false);\n    }, 1000);\n  };\n\n  const wrongPopup = () => {\n    setIsWrong(true);\n    setTimeout(() => {\n      setIsWrong(false);\n    }, 1000);\n  };\n\n  const checkAnswer = (selectedAnswer) => {\n    setIsShowCurrectAnswer(true);\n\n    setTimeout(() => {\n      setIsShowCurrectAnswer(false);\n      if (selectedAnswer === question.correct_answer) {\n        successPopup();\n        db.collection(\"questions\").doc(question.id).update({\n          user_answer: selectedAnswer,\n          user_answer_status: 1\n        });\n      } else {\n        wrongPopup();\n        db.collection(\"questions\").doc(question.id).update({\n          user_answer: selectedAnswer,\n          user_answer_status: 2\n        });\n      }\n    }, 500);\n  };\n\n  const onSkipClick = () => {\n    setIsShowCurrectAnswer(true);\n\n    setTimeout(() => {\n      setIsShowCurrectAnswer(false);\n      db.collection(\"questions\").doc(question.id).update({\n        user_answer_status: 3\n      });\n    }, 1000);\n  };\n\n  useEffect(() => {\n    let bg = randomBg();\n    setBgClass(bg);\n\n    db.collection(\"questions\")\n      .where('user_answer_status', '==', 0)\n      .limit(1)\n      .onSnapshot((doc) => {\n        if (!doc.empty) {\n          setQuestion({ id: doc.docs[0].id, ...doc.docs[0].data() });\n        } else {\n          setQuestion(null);\n          console.log(\"No such document!\");\n        }\n      });\n\n    db.collection(\"questions\")\n      .onSnapshot((doc) => {\n        setTotal(doc.size);\n      });\n\n    db.collection(\"questions\")\n      .where('user_answer_status', '>', 0)\n      .onSnapshot((doc) => {\n        setSolved(doc.size);\n      });\n\n    db.collection(\"questions\")\n      .where('user_answer_status', '==', 2)\n      .onSnapshot((doc) => {\n        setWrong(doc.size);\n      });\n\n    db.collection(\"questions\")\n      .where('user_answer_status', '==', 1)\n      .onSnapshot((doc) => {\n        setCorrect(doc.size);\n      });\n    \n  }, []);\n\n  return (\n    <div className={`bg ${bgClass}`}>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 my-3\">\n            <h1 className=\"text-white text-center\">Mintu App</h1>\n          </div>\n          <div className=\"col-12 col-md-6 col-lg-3\">\n            <p className=\"text-white\"><b>Total: </b> { total }</p>\n          </div>\n          <div className=\"col-12 col-md-6 col-lg-3\">\n            <p className=\"text-white\"><b>Solved: </b> { solved }</p>\n          </div>\n          <div className=\"col-12 col-md-6 col-lg-3\">\n            <p className=\"text-white\"><b>Correct: </b> { correct }</p>\n          </div>\n          <div className=\"col-12 col-md-6 col-lg-3\">\n            <p className=\"text-white\"><b>Wrong: </b> { wrong }</p>\n          </div>\n        </div>\n        { question ? <RenderQuestion question={question} checkAnswer={checkAnswer} isShowCurrectAnswer={isShowCurrectAnswer} onSkipClick={onSkipClick} /> : <NoQuestion/> }\n        { isSuccess && <RenderSuccessPopup/> }\n        { isWrong && <RenderWrongPopup/> }\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/bootstrap.min.css';\nimport './css/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}